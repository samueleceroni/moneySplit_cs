#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseController
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MONEYSPLIT")]
	public partial class MoneySplitDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTelegramGroup(TelegramGroup instance);
    partial void UpdateTelegramGroup(TelegramGroup instance);
    partial void DeleteTelegramGroup(TelegramGroup instance);
    partial void InsertGeneralContext(GeneralContext instance);
    partial void UpdateGeneralContext(GeneralContext instance);
    partial void DeleteGeneralContext(GeneralContext instance);
    partial void InsertGroupUser(GroupUser instance);
    partial void UpdateGroupUser(GroupUser instance);
    partial void DeleteGroupUser(GroupUser instance);
    partial void InsertMoneySplitTelegramUser(MoneySplitTelegramUser instance);
    partial void UpdateMoneySplitTelegramUser(MoneySplitTelegramUser instance);
    partial void DeleteMoneySplitTelegramUser(MoneySplitTelegramUser instance);
    partial void InsertMoneySplitUser(MoneySplitUser instance);
    partial void UpdateMoneySplitUser(MoneySplitUser instance);
    partial void DeleteMoneySplitUser(MoneySplitUser instance);
    partial void InsertSharedContext(SharedContext instance);
    partial void UpdateSharedContext(SharedContext instance);
    partial void DeleteSharedContext(SharedContext instance);
    partial void InsertSharedContextGroup(SharedContextGroup instance);
    partial void UpdateSharedContextGroup(SharedContextGroup instance);
    partial void DeleteSharedContextGroup(SharedContextGroup instance);
    partial void InsertSharedContextUser(SharedContextUser instance);
    partial void UpdateSharedContextUser(SharedContextUser instance);
    partial void DeleteSharedContextUser(SharedContextUser instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    partial void InsertStoreTransaction(StoreTransaction instance);
    partial void UpdateStoreTransaction(StoreTransaction instance);
    partial void DeleteStoreTransaction(StoreTransaction instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertTaggedTransaction(TaggedTransaction instance);
    partial void UpdateTaggedTransaction(TaggedTransaction instance);
    partial void DeleteTaggedTransaction(TaggedTransaction instance);
    partial void InsertGeneralList(GeneralList instance);
    partial void UpdateGeneralList(GeneralList instance);
    partial void DeleteGeneralList(GeneralList instance);
    partial void InsertGeneralTransaction(GeneralTransaction instance);
    partial void UpdateGeneralTransaction(GeneralTransaction instance);
    partial void DeleteGeneralTransaction(GeneralTransaction instance);
    #endregion
		
		public MoneySplitDataClassesDataContext() : 
				base(global::DatabaseController.Properties.Settings.Default.MONEYSPLITConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public MoneySplitDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoneySplitDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoneySplitDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoneySplitDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TelegramGroup> TelegramGroups
		{
			get
			{
				return this.GetTable<TelegramGroup>();
			}
		}
		
		public System.Data.Linq.Table<GeneralContext> GeneralContexts
		{
			get
			{
				return this.GetTable<GeneralContext>();
			}
		}
		
		public System.Data.Linq.Table<GroupUser> GroupUsers
		{
			get
			{
				return this.GetTable<GroupUser>();
			}
		}
		
		public System.Data.Linq.Table<MoneySplitTelegramUser> MoneySplitTelegramUsers
		{
			get
			{
				return this.GetTable<MoneySplitTelegramUser>();
			}
		}
		
		public System.Data.Linq.Table<MoneySplitUser> MoneySplitUsers
		{
			get
			{
				return this.GetTable<MoneySplitUser>();
			}
		}
		
		public System.Data.Linq.Table<SharedContext> SharedContexts
		{
			get
			{
				return this.GetTable<SharedContext>();
			}
		}
		
		public System.Data.Linq.Table<SharedContextGroup> SharedContextGroups
		{
			get
			{
				return this.GetTable<SharedContextGroup>();
			}
		}
		
		public System.Data.Linq.Table<SharedContextUser> SharedContextUsers
		{
			get
			{
				return this.GetTable<SharedContextUser>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<StoreTransaction> StoreTransactions
		{
			get
			{
				return this.GetTable<StoreTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<TaggedTransaction> TaggedTransactions
		{
			get
			{
				return this.GetTable<TaggedTransaction>();
			}
		}
		
		public System.Data.Linq.Table<MoneySplitCompleteUser> MoneySplitCompleteUsers
		{
			get
			{
				return this.GetTable<MoneySplitCompleteUser>();
			}
		}
		
		public System.Data.Linq.Table<GeneralList> GeneralLists
		{
			get
			{
				return this.GetTable<GeneralList>();
			}
		}
		
		public System.Data.Linq.Table<GeneralTransaction> GeneralTransactions
		{
			get
			{
				return this.GetTable<GeneralTransaction>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextAvailableIDValue")]
		public ISingleResult<GetNextAvailableIDValueResult> GetNextAvailableIDValue()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetNextAvailableIDValueResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TelegramGroup")]
	public partial class TelegramGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TelegramId;
		
		private string _Name;
		
		private decimal _ContextId;
		
		private EntitySet<GroupUser> _GroupUsers;
		
		private EntitySet<SharedContextGroup> _SharedContextGroups;
		
		private EntityRef<GeneralContext> _GeneralContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTelegramIdChanging(string value);
    partial void OnTelegramIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContextIdChanging(decimal value);
    partial void OnContextIdChanged();
    #endregion
		
		public TelegramGroup()
		{
			this._GroupUsers = new EntitySet<GroupUser>(new Action<GroupUser>(this.attach_GroupUsers), new Action<GroupUser>(this.detach_GroupUsers));
			this._SharedContextGroups = new EntitySet<SharedContextGroup>(new Action<SharedContextGroup>(this.attach_SharedContextGroups), new Action<SharedContextGroup>(this.detach_SharedContextGroups));
			this._GeneralContext = default(EntityRef<GeneralContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelegramId", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string TelegramId
		{
			get
			{
				return this._TelegramId;
			}
			set
			{
				if ((this._TelegramId != value))
				{
					this.OnTelegramIdChanging(value);
					this.SendPropertyChanging();
					this._TelegramId = value;
					this.SendPropertyChanged("TelegramId");
					this.OnTelegramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal ContextId
		{
			get
			{
				return this._ContextId;
			}
			set
			{
				if ((this._ContextId != value))
				{
					if (this._GeneralContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIdChanging(value);
					this.SendPropertyChanging();
					this._ContextId = value;
					this.SendPropertyChanged("ContextId");
					this.OnContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TelegramGroup_GroupUser", Storage="_GroupUsers", ThisKey="TelegramId", OtherKey="GroupId")]
		public EntitySet<GroupUser> GroupUsers
		{
			get
			{
				return this._GroupUsers;
			}
			set
			{
				this._GroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TelegramGroup_SharedContextGroup", Storage="_SharedContextGroups", ThisKey="ContextId", OtherKey="GroupId")]
		public EntitySet<SharedContextGroup> SharedContextGroups
		{
			get
			{
				return this._SharedContextGroups;
			}
			set
			{
				this._SharedContextGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralContext_TelegramGroup", Storage="_GeneralContext", ThisKey="ContextId", OtherKey="ContextId", IsForeignKey=true)]
		public GeneralContext GeneralContext
		{
			get
			{
				return this._GeneralContext.Entity;
			}
			set
			{
				GeneralContext previousValue = this._GeneralContext.Entity;
				if (((previousValue != value) 
							|| (this._GeneralContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralContext.Entity = null;
						previousValue.TelegramGroup = null;
					}
					this._GeneralContext.Entity = value;
					if ((value != null))
					{
						value.TelegramGroup = this;
						this._ContextId = value.ContextId;
					}
					else
					{
						this._ContextId = default(decimal);
					}
					this.SendPropertyChanged("GeneralContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupUsers(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.TelegramGroup = this;
		}
		
		private void detach_GroupUsers(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.TelegramGroup = null;
		}
		
		private void attach_SharedContextGroups(SharedContextGroup entity)
		{
			this.SendPropertyChanging();
			entity.TelegramGroup = this;
		}
		
		private void detach_SharedContextGroups(SharedContextGroup entity)
		{
			this.SendPropertyChanging();
			entity.TelegramGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeneralContext")]
	public partial class GeneralContext : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ContextId;
		
		private EntityRef<TelegramGroup> _TelegramGroup;
		
		private EntityRef<MoneySplitUser> _MoneySplitUser;
		
		private EntityRef<SharedContext> _SharedContext;
		
		private EntitySet<GeneralList> _GeneralLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContextIdChanging(decimal value);
    partial void OnContextIdChanged();
    #endregion
		
		public GeneralContext()
		{
			this._TelegramGroup = default(EntityRef<TelegramGroup>);
			this._MoneySplitUser = default(EntityRef<MoneySplitUser>);
			this._SharedContext = default(EntityRef<SharedContext>);
			this._GeneralLists = new EntitySet<GeneralList>(new Action<GeneralList>(this.attach_GeneralLists), new Action<GeneralList>(this.detach_GeneralLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal ContextId
		{
			get
			{
				return this._ContextId;
			}
			set
			{
				if ((this._ContextId != value))
				{
					this.OnContextIdChanging(value);
					this.SendPropertyChanging();
					this._ContextId = value;
					this.SendPropertyChanged("ContextId");
					this.OnContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralContext_TelegramGroup", Storage="_TelegramGroup", ThisKey="ContextId", OtherKey="ContextId", IsUnique=true, IsForeignKey=false)]
		public TelegramGroup TelegramGroup
		{
			get
			{
				return this._TelegramGroup.Entity;
			}
			set
			{
				TelegramGroup previousValue = this._TelegramGroup.Entity;
				if (((previousValue != value) 
							|| (this._TelegramGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TelegramGroup.Entity = null;
						previousValue.GeneralContext = null;
					}
					this._TelegramGroup.Entity = value;
					if ((value != null))
					{
						value.GeneralContext = this;
					}
					this.SendPropertyChanged("TelegramGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralContext_MoneySplitUser", Storage="_MoneySplitUser", ThisKey="ContextId", OtherKey="ContextId", IsUnique=true, IsForeignKey=false)]
		public MoneySplitUser MoneySplitUser
		{
			get
			{
				return this._MoneySplitUser.Entity;
			}
			set
			{
				MoneySplitUser previousValue = this._MoneySplitUser.Entity;
				if (((previousValue != value) 
							|| (this._MoneySplitUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneySplitUser.Entity = null;
						previousValue.GeneralContext = null;
					}
					this._MoneySplitUser.Entity = value;
					if ((value != null))
					{
						value.GeneralContext = this;
					}
					this.SendPropertyChanged("MoneySplitUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralContext_SharedContext", Storage="_SharedContext", ThisKey="ContextId", OtherKey="ContextId", IsUnique=true, IsForeignKey=false)]
		public SharedContext SharedContext
		{
			get
			{
				return this._SharedContext.Entity;
			}
			set
			{
				SharedContext previousValue = this._SharedContext.Entity;
				if (((previousValue != value) 
							|| (this._SharedContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SharedContext.Entity = null;
						previousValue.GeneralContext = null;
					}
					this._SharedContext.Entity = value;
					if ((value != null))
					{
						value.GeneralContext = this;
					}
					this.SendPropertyChanged("SharedContext");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralContext_GeneralList", Storage="_GeneralLists", ThisKey="ContextId", OtherKey="ContextId")]
		public EntitySet<GeneralList> GeneralLists
		{
			get
			{
				return this._GeneralLists;
			}
			set
			{
				this._GeneralLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneralLists(GeneralList entity)
		{
			this.SendPropertyChanging();
			entity.GeneralContext = this;
		}
		
		private void detach_GeneralLists(GeneralList entity)
		{
			this.SendPropertyChanging();
			entity.GeneralContext = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupUser")]
	public partial class GroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TelegramUserId;
		
		private string _GroupId;
		
		private char _IsAdmin;
		
		private EntityRef<TelegramGroup> _TelegramGroup;
		
		private EntityRef<MoneySplitTelegramUser> _MoneySplitTelegramUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTelegramUserIdChanging(string value);
    partial void OnTelegramUserIdChanged();
    partial void OnGroupIdChanging(string value);
    partial void OnGroupIdChanged();
    partial void OnIsAdminChanging(char value);
    partial void OnIsAdminChanged();
    #endregion
		
		public GroupUser()
		{
			this._TelegramGroup = default(EntityRef<TelegramGroup>);
			this._MoneySplitTelegramUser = default(EntityRef<MoneySplitTelegramUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelegramUserId", DbType="VarChar(16) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TelegramUserId
		{
			get
			{
				return this._TelegramUserId;
			}
			set
			{
				if ((this._TelegramUserId != value))
				{
					if (this._MoneySplitTelegramUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTelegramUserIdChanging(value);
					this.SendPropertyChanging();
					this._TelegramUserId = value;
					this.SendPropertyChanged("TelegramUserId");
					this.OnTelegramUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="VarChar(16) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._TelegramGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Char(1) NOT NULL")]
		public char IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TelegramGroup_GroupUser", Storage="_TelegramGroup", ThisKey="GroupId", OtherKey="TelegramId", IsForeignKey=true)]
		public TelegramGroup TelegramGroup
		{
			get
			{
				return this._TelegramGroup.Entity;
			}
			set
			{
				TelegramGroup previousValue = this._TelegramGroup.Entity;
				if (((previousValue != value) 
							|| (this._TelegramGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TelegramGroup.Entity = null;
						previousValue.GroupUsers.Remove(this);
					}
					this._TelegramGroup.Entity = value;
					if ((value != null))
					{
						value.GroupUsers.Add(this);
						this._GroupId = value.TelegramId;
					}
					else
					{
						this._GroupId = default(string);
					}
					this.SendPropertyChanged("TelegramGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitTelegramUser_GroupUser", Storage="_MoneySplitTelegramUser", ThisKey="TelegramUserId", OtherKey="TelegramId", IsForeignKey=true)]
		public MoneySplitTelegramUser MoneySplitTelegramUser
		{
			get
			{
				return this._MoneySplitTelegramUser.Entity;
			}
			set
			{
				MoneySplitTelegramUser previousValue = this._MoneySplitTelegramUser.Entity;
				if (((previousValue != value) 
							|| (this._MoneySplitTelegramUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneySplitTelegramUser.Entity = null;
						previousValue.GroupUsers.Remove(this);
					}
					this._MoneySplitTelegramUser.Entity = value;
					if ((value != null))
					{
						value.GroupUsers.Add(this);
						this._TelegramUserId = value.TelegramId;
					}
					else
					{
						this._TelegramUserId = default(string);
					}
					this.SendPropertyChanged("MoneySplitTelegramUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneySplitTelegramUser")]
	public partial class MoneySplitTelegramUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ContextId;
		
		private string _TelegramId;
		
		private EntitySet<GroupUser> _GroupUsers;
		
		private EntityRef<MoneySplitUser> _MoneySplitUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContextIdChanging(decimal value);
    partial void OnContextIdChanged();
    partial void OnTelegramIdChanging(string value);
    partial void OnTelegramIdChanged();
    #endregion
		
		public MoneySplitTelegramUser()
		{
			this._GroupUsers = new EntitySet<GroupUser>(new Action<GroupUser>(this.attach_GroupUsers), new Action<GroupUser>(this.detach_GroupUsers));
			this._MoneySplitUser = default(EntityRef<MoneySplitUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal ContextId
		{
			get
			{
				return this._ContextId;
			}
			set
			{
				if ((this._ContextId != value))
				{
					if (this._MoneySplitUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIdChanging(value);
					this.SendPropertyChanging();
					this._ContextId = value;
					this.SendPropertyChanged("ContextId");
					this.OnContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelegramId", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string TelegramId
		{
			get
			{
				return this._TelegramId;
			}
			set
			{
				if ((this._TelegramId != value))
				{
					this.OnTelegramIdChanging(value);
					this.SendPropertyChanging();
					this._TelegramId = value;
					this.SendPropertyChanged("TelegramId");
					this.OnTelegramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitTelegramUser_GroupUser", Storage="_GroupUsers", ThisKey="TelegramId", OtherKey="TelegramUserId")]
		public EntitySet<GroupUser> GroupUsers
		{
			get
			{
				return this._GroupUsers;
			}
			set
			{
				this._GroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitUser_MoneySplitTelegramUser", Storage="_MoneySplitUser", ThisKey="ContextId", OtherKey="ContextId", IsForeignKey=true)]
		public MoneySplitUser MoneySplitUser
		{
			get
			{
				return this._MoneySplitUser.Entity;
			}
			set
			{
				MoneySplitUser previousValue = this._MoneySplitUser.Entity;
				if (((previousValue != value) 
							|| (this._MoneySplitUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneySplitUser.Entity = null;
						previousValue.MoneySplitTelegramUser = null;
					}
					this._MoneySplitUser.Entity = value;
					if ((value != null))
					{
						value.MoneySplitTelegramUser = this;
						this._ContextId = value.ContextId;
					}
					else
					{
						this._ContextId = default(decimal);
					}
					this.SendPropertyChanged("MoneySplitUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupUsers(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.MoneySplitTelegramUser = this;
		}
		
		private void detach_GroupUsers(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.MoneySplitTelegramUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneySplitUser")]
	public partial class MoneySplitUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private decimal _ContextId;
		
		private EntityRef<MoneySplitTelegramUser> _MoneySplitTelegramUser;
		
		private EntitySet<SharedContext> _SharedContexts;
		
		private EntitySet<SharedContextUser> _SharedContextUsers;
		
		private EntitySet<GeneralTransaction> _GeneralTransactions;
		
		private EntityRef<GeneralContext> _GeneralContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContextIdChanging(decimal value);
    partial void OnContextIdChanged();
    #endregion
		
		public MoneySplitUser()
		{
			this._MoneySplitTelegramUser = default(EntityRef<MoneySplitTelegramUser>);
			this._SharedContexts = new EntitySet<SharedContext>(new Action<SharedContext>(this.attach_SharedContexts), new Action<SharedContext>(this.detach_SharedContexts));
			this._SharedContextUsers = new EntitySet<SharedContextUser>(new Action<SharedContextUser>(this.attach_SharedContextUsers), new Action<SharedContextUser>(this.detach_SharedContextUsers));
			this._GeneralTransactions = new EntitySet<GeneralTransaction>(new Action<GeneralTransaction>(this.attach_GeneralTransactions), new Action<GeneralTransaction>(this.detach_GeneralTransactions));
			this._GeneralContext = default(EntityRef<GeneralContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal ContextId
		{
			get
			{
				return this._ContextId;
			}
			set
			{
				if ((this._ContextId != value))
				{
					if (this._GeneralContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIdChanging(value);
					this.SendPropertyChanging();
					this._ContextId = value;
					this.SendPropertyChanged("ContextId");
					this.OnContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitUser_MoneySplitTelegramUser", Storage="_MoneySplitTelegramUser", ThisKey="ContextId", OtherKey="ContextId", IsUnique=true, IsForeignKey=false)]
		public MoneySplitTelegramUser MoneySplitTelegramUser
		{
			get
			{
				return this._MoneySplitTelegramUser.Entity;
			}
			set
			{
				MoneySplitTelegramUser previousValue = this._MoneySplitTelegramUser.Entity;
				if (((previousValue != value) 
							|| (this._MoneySplitTelegramUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneySplitTelegramUser.Entity = null;
						previousValue.MoneySplitUser = null;
					}
					this._MoneySplitTelegramUser.Entity = value;
					if ((value != null))
					{
						value.MoneySplitUser = this;
					}
					this.SendPropertyChanged("MoneySplitTelegramUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitUser_SharedContext", Storage="_SharedContexts", ThisKey="ContextId", OtherKey="UserCreatorId")]
		public EntitySet<SharedContext> SharedContexts
		{
			get
			{
				return this._SharedContexts;
			}
			set
			{
				this._SharedContexts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitUser_SharedContextUser", Storage="_SharedContextUsers", ThisKey="ContextId", OtherKey="UserId")]
		public EntitySet<SharedContextUser> SharedContextUsers
		{
			get
			{
				return this._SharedContextUsers;
			}
			set
			{
				this._SharedContextUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitUser_GeneralTransaction", Storage="_GeneralTransactions", ThisKey="ContextId", OtherKey="UserAuthor")]
		public EntitySet<GeneralTransaction> GeneralTransactions
		{
			get
			{
				return this._GeneralTransactions;
			}
			set
			{
				this._GeneralTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralContext_MoneySplitUser", Storage="_GeneralContext", ThisKey="ContextId", OtherKey="ContextId", IsForeignKey=true)]
		public GeneralContext GeneralContext
		{
			get
			{
				return this._GeneralContext.Entity;
			}
			set
			{
				GeneralContext previousValue = this._GeneralContext.Entity;
				if (((previousValue != value) 
							|| (this._GeneralContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralContext.Entity = null;
						previousValue.MoneySplitUser = null;
					}
					this._GeneralContext.Entity = value;
					if ((value != null))
					{
						value.MoneySplitUser = this;
						this._ContextId = value.ContextId;
					}
					else
					{
						this._ContextId = default(decimal);
					}
					this.SendPropertyChanged("GeneralContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SharedContexts(SharedContext entity)
		{
			this.SendPropertyChanging();
			entity.MoneySplitUser = this;
		}
		
		private void detach_SharedContexts(SharedContext entity)
		{
			this.SendPropertyChanging();
			entity.MoneySplitUser = null;
		}
		
		private void attach_SharedContextUsers(SharedContextUser entity)
		{
			this.SendPropertyChanging();
			entity.MoneySplitUser = this;
		}
		
		private void detach_SharedContextUsers(SharedContextUser entity)
		{
			this.SendPropertyChanging();
			entity.MoneySplitUser = null;
		}
		
		private void attach_GeneralTransactions(GeneralTransaction entity)
		{
			this.SendPropertyChanging();
			entity.MoneySplitUser = this;
		}
		
		private void detach_GeneralTransactions(GeneralTransaction entity)
		{
			this.SendPropertyChanging();
			entity.MoneySplitUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SharedContext")]
	public partial class SharedContext : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ContextId;
		
		private decimal _UserCreatorId;
		
		private EntitySet<SharedContextGroup> _SharedContextGroups;
		
		private EntitySet<SharedContextUser> _SharedContextUsers;
		
		private EntityRef<GeneralContext> _GeneralContext;
		
		private EntityRef<MoneySplitUser> _MoneySplitUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContextIdChanging(decimal value);
    partial void OnContextIdChanged();
    partial void OnUserCreatorIdChanging(decimal value);
    partial void OnUserCreatorIdChanged();
    #endregion
		
		public SharedContext()
		{
			this._SharedContextGroups = new EntitySet<SharedContextGroup>(new Action<SharedContextGroup>(this.attach_SharedContextGroups), new Action<SharedContextGroup>(this.detach_SharedContextGroups));
			this._SharedContextUsers = new EntitySet<SharedContextUser>(new Action<SharedContextUser>(this.attach_SharedContextUsers), new Action<SharedContextUser>(this.detach_SharedContextUsers));
			this._GeneralContext = default(EntityRef<GeneralContext>);
			this._MoneySplitUser = default(EntityRef<MoneySplitUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal ContextId
		{
			get
			{
				return this._ContextId;
			}
			set
			{
				if ((this._ContextId != value))
				{
					if (this._GeneralContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIdChanging(value);
					this.SendPropertyChanging();
					this._ContextId = value;
					this.SendPropertyChanged("ContextId");
					this.OnContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreatorId", DbType="Decimal(9,0) NOT NULL")]
		public decimal UserCreatorId
		{
			get
			{
				return this._UserCreatorId;
			}
			set
			{
				if ((this._UserCreatorId != value))
				{
					if (this._MoneySplitUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._UserCreatorId = value;
					this.SendPropertyChanged("UserCreatorId");
					this.OnUserCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SharedContext_SharedContextGroup", Storage="_SharedContextGroups", ThisKey="ContextId", OtherKey="SharedContextId")]
		public EntitySet<SharedContextGroup> SharedContextGroups
		{
			get
			{
				return this._SharedContextGroups;
			}
			set
			{
				this._SharedContextGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SharedContext_SharedContextUser", Storage="_SharedContextUsers", ThisKey="ContextId", OtherKey="SharedContextId")]
		public EntitySet<SharedContextUser> SharedContextUsers
		{
			get
			{
				return this._SharedContextUsers;
			}
			set
			{
				this._SharedContextUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralContext_SharedContext", Storage="_GeneralContext", ThisKey="ContextId", OtherKey="ContextId", IsForeignKey=true)]
		public GeneralContext GeneralContext
		{
			get
			{
				return this._GeneralContext.Entity;
			}
			set
			{
				GeneralContext previousValue = this._GeneralContext.Entity;
				if (((previousValue != value) 
							|| (this._GeneralContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralContext.Entity = null;
						previousValue.SharedContext = null;
					}
					this._GeneralContext.Entity = value;
					if ((value != null))
					{
						value.SharedContext = this;
						this._ContextId = value.ContextId;
					}
					else
					{
						this._ContextId = default(decimal);
					}
					this.SendPropertyChanged("GeneralContext");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitUser_SharedContext", Storage="_MoneySplitUser", ThisKey="UserCreatorId", OtherKey="ContextId", IsForeignKey=true)]
		public MoneySplitUser MoneySplitUser
		{
			get
			{
				return this._MoneySplitUser.Entity;
			}
			set
			{
				MoneySplitUser previousValue = this._MoneySplitUser.Entity;
				if (((previousValue != value) 
							|| (this._MoneySplitUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneySplitUser.Entity = null;
						previousValue.SharedContexts.Remove(this);
					}
					this._MoneySplitUser.Entity = value;
					if ((value != null))
					{
						value.SharedContexts.Add(this);
						this._UserCreatorId = value.ContextId;
					}
					else
					{
						this._UserCreatorId = default(decimal);
					}
					this.SendPropertyChanged("MoneySplitUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SharedContextGroups(SharedContextGroup entity)
		{
			this.SendPropertyChanging();
			entity.SharedContext = this;
		}
		
		private void detach_SharedContextGroups(SharedContextGroup entity)
		{
			this.SendPropertyChanging();
			entity.SharedContext = null;
		}
		
		private void attach_SharedContextUsers(SharedContextUser entity)
		{
			this.SendPropertyChanging();
			entity.SharedContext = this;
		}
		
		private void detach_SharedContextUsers(SharedContextUser entity)
		{
			this.SendPropertyChanging();
			entity.SharedContext = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SharedContextGroup")]
	public partial class SharedContextGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _GroupId;
		
		private decimal _SharedContextId;
		
		private EntityRef<SharedContext> _SharedContext;
		
		private EntityRef<TelegramGroup> _TelegramGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(decimal value);
    partial void OnGroupIdChanged();
    partial void OnSharedContextIdChanging(decimal value);
    partial void OnSharedContextIdChanged();
    #endregion
		
		public SharedContextGroup()
		{
			this._SharedContext = default(EntityRef<SharedContext>);
			this._TelegramGroup = default(EntityRef<TelegramGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._TelegramGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SharedContextId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal SharedContextId
		{
			get
			{
				return this._SharedContextId;
			}
			set
			{
				if ((this._SharedContextId != value))
				{
					if (this._SharedContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSharedContextIdChanging(value);
					this.SendPropertyChanging();
					this._SharedContextId = value;
					this.SendPropertyChanged("SharedContextId");
					this.OnSharedContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SharedContext_SharedContextGroup", Storage="_SharedContext", ThisKey="SharedContextId", OtherKey="ContextId", IsForeignKey=true)]
		public SharedContext SharedContext
		{
			get
			{
				return this._SharedContext.Entity;
			}
			set
			{
				SharedContext previousValue = this._SharedContext.Entity;
				if (((previousValue != value) 
							|| (this._SharedContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SharedContext.Entity = null;
						previousValue.SharedContextGroups.Remove(this);
					}
					this._SharedContext.Entity = value;
					if ((value != null))
					{
						value.SharedContextGroups.Add(this);
						this._SharedContextId = value.ContextId;
					}
					else
					{
						this._SharedContextId = default(decimal);
					}
					this.SendPropertyChanged("SharedContext");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TelegramGroup_SharedContextGroup", Storage="_TelegramGroup", ThisKey="GroupId", OtherKey="ContextId", IsForeignKey=true)]
		public TelegramGroup TelegramGroup
		{
			get
			{
				return this._TelegramGroup.Entity;
			}
			set
			{
				TelegramGroup previousValue = this._TelegramGroup.Entity;
				if (((previousValue != value) 
							|| (this._TelegramGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TelegramGroup.Entity = null;
						previousValue.SharedContextGroups.Remove(this);
					}
					this._TelegramGroup.Entity = value;
					if ((value != null))
					{
						value.SharedContextGroups.Add(this);
						this._GroupId = value.ContextId;
					}
					else
					{
						this._GroupId = default(decimal);
					}
					this.SendPropertyChanged("TelegramGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SharedContextUser")]
	public partial class SharedContextUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _UserId;
		
		private decimal _SharedContextId;
		
		private EntityRef<MoneySplitUser> _MoneySplitUser;
		
		private EntityRef<SharedContext> _SharedContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(decimal value);
    partial void OnUserIdChanged();
    partial void OnSharedContextIdChanging(decimal value);
    partial void OnSharedContextIdChanged();
    #endregion
		
		public SharedContextUser()
		{
			this._MoneySplitUser = default(EntityRef<MoneySplitUser>);
			this._SharedContext = default(EntityRef<SharedContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._MoneySplitUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SharedContextId", DbType="Decimal(9,0) NOT NULL", IsPrimaryKey=true)]
		public decimal SharedContextId
		{
			get
			{
				return this._SharedContextId;
			}
			set
			{
				if ((this._SharedContextId != value))
				{
					if (this._SharedContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSharedContextIdChanging(value);
					this.SendPropertyChanging();
					this._SharedContextId = value;
					this.SendPropertyChanged("SharedContextId");
					this.OnSharedContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitUser_SharedContextUser", Storage="_MoneySplitUser", ThisKey="UserId", OtherKey="ContextId", IsForeignKey=true)]
		public MoneySplitUser MoneySplitUser
		{
			get
			{
				return this._MoneySplitUser.Entity;
			}
			set
			{
				MoneySplitUser previousValue = this._MoneySplitUser.Entity;
				if (((previousValue != value) 
							|| (this._MoneySplitUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneySplitUser.Entity = null;
						previousValue.SharedContextUsers.Remove(this);
					}
					this._MoneySplitUser.Entity = value;
					if ((value != null))
					{
						value.SharedContextUsers.Add(this);
						this._UserId = value.ContextId;
					}
					else
					{
						this._UserId = default(decimal);
					}
					this.SendPropertyChanged("MoneySplitUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SharedContext_SharedContextUser", Storage="_SharedContext", ThisKey="SharedContextId", OtherKey="ContextId", IsForeignKey=true)]
		public SharedContext SharedContext
		{
			get
			{
				return this._SharedContext.Entity;
			}
			set
			{
				SharedContext previousValue = this._SharedContext.Entity;
				if (((previousValue != value) 
							|| (this._SharedContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SharedContext.Entity = null;
						previousValue.SharedContextUsers.Remove(this);
					}
					this._SharedContext.Entity = value;
					if ((value != null))
					{
						value.SharedContextUsers.Add(this);
						this._SharedContextId = value.ContextId;
					}
					else
					{
						this._SharedContextId = default(decimal);
					}
					this.SendPropertyChanged("SharedContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Store")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Address;
		
		private string _StoreName;
		
		private string _VatAccount;
		
		private EntitySet<StoreTransaction> _StoreTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStoreNameChanging(string value);
    partial void OnStoreNameChanged();
    partial void OnVatAccountChanging(string value);
    partial void OnVatAccountChanged();
    #endregion
		
		public Store()
		{
			this._StoreTransactions = new EntitySet<StoreTransaction>(new Action<StoreTransaction>(this.attach_StoreTransactions), new Action<StoreTransaction>(this.detach_StoreTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreName", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string StoreName
		{
			get
			{
				return this._StoreName;
			}
			set
			{
				if ((this._StoreName != value))
				{
					this.OnStoreNameChanging(value);
					this.SendPropertyChanging();
					this._StoreName = value;
					this.SendPropertyChanged("StoreName");
					this.OnStoreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatAccount", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VatAccount
		{
			get
			{
				return this._VatAccount;
			}
			set
			{
				if ((this._VatAccount != value))
				{
					this.OnVatAccountChanging(value);
					this.SendPropertyChanging();
					this._VatAccount = value;
					this.SendPropertyChanged("VatAccount");
					this.OnVatAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_StoreTransaction", Storage="_StoreTransactions", ThisKey="VatAccount", OtherKey="VatAccount")]
		public EntitySet<StoreTransaction> StoreTransactions
		{
			get
			{
				return this._StoreTransactions;
			}
			set
			{
				this._StoreTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoreTransactions(StoreTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_StoreTransactions(StoreTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreTransaction")]
	public partial class StoreTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _TransactionId;
		
		private string _Rev_Title;
		
		private string _Rev_Text;
		
		private System.Nullable<decimal> _Rev_Star;
		
		private System.Nullable<System.DateTime> _Rev_Date;
		
		private string _VatAccount;
		
		private EntityRef<Store> _Store;
		
		private EntityRef<GeneralTransaction> _GeneralTransaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIdChanging(decimal value);
    partial void OnTransactionIdChanged();
    partial void OnRev_TitleChanging(string value);
    partial void OnRev_TitleChanged();
    partial void OnRev_TextChanging(string value);
    partial void OnRev_TextChanged();
    partial void OnRev_StarChanging(System.Nullable<decimal> value);
    partial void OnRev_StarChanged();
    partial void OnRev_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnRev_DateChanged();
    partial void OnVatAccountChanging(string value);
    partial void OnVatAccountChanged();
    #endregion
		
		public StoreTransaction()
		{
			this._Store = default(EntityRef<Store>);
			this._GeneralTransaction = default(EntityRef<GeneralTransaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", DbType="Decimal(16,0) NOT NULL", IsPrimaryKey=true)]
		public decimal TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					if (this._GeneralTransaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rev_Title", DbType="Char(50)")]
		public string Rev_Title
		{
			get
			{
				return this._Rev_Title;
			}
			set
			{
				if ((this._Rev_Title != value))
				{
					this.OnRev_TitleChanging(value);
					this.SendPropertyChanging();
					this._Rev_Title = value;
					this.SendPropertyChanged("Rev_Title");
					this.OnRev_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rev_Text", DbType="Char(1000)")]
		public string Rev_Text
		{
			get
			{
				return this._Rev_Text;
			}
			set
			{
				if ((this._Rev_Text != value))
				{
					this.OnRev_TextChanging(value);
					this.SendPropertyChanging();
					this._Rev_Text = value;
					this.SendPropertyChanged("Rev_Text");
					this.OnRev_TextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rev_Star", DbType="Decimal(2,0)")]
		public System.Nullable<decimal> Rev_Star
		{
			get
			{
				return this._Rev_Star;
			}
			set
			{
				if ((this._Rev_Star != value))
				{
					this.OnRev_StarChanging(value);
					this.SendPropertyChanging();
					this._Rev_Star = value;
					this.SendPropertyChanged("Rev_Star");
					this.OnRev_StarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rev_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Rev_Date
		{
			get
			{
				return this._Rev_Date;
			}
			set
			{
				if ((this._Rev_Date != value))
				{
					this.OnRev_DateChanging(value);
					this.SendPropertyChanging();
					this._Rev_Date = value;
					this.SendPropertyChanged("Rev_Date");
					this.OnRev_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatAccount", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string VatAccount
		{
			get
			{
				return this._VatAccount;
			}
			set
			{
				if ((this._VatAccount != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVatAccountChanging(value);
					this.SendPropertyChanging();
					this._VatAccount = value;
					this.SendPropertyChanged("VatAccount");
					this.OnVatAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_StoreTransaction", Storage="_Store", ThisKey="VatAccount", OtherKey="VatAccount", IsForeignKey=true)]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.StoreTransactions.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.StoreTransactions.Add(this);
						this._VatAccount = value.VatAccount;
					}
					else
					{
						this._VatAccount = default(string);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralTransaction_StoreTransaction", Storage="_GeneralTransaction", ThisKey="TransactionId", OtherKey="TransactionId", IsForeignKey=true)]
		public GeneralTransaction GeneralTransaction
		{
			get
			{
				return this._GeneralTransaction.Entity;
			}
			set
			{
				GeneralTransaction previousValue = this._GeneralTransaction.Entity;
				if (((previousValue != value) 
							|| (this._GeneralTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralTransaction.Entity = null;
						previousValue.StoreTransaction = null;
					}
					this._GeneralTransaction.Entity = value;
					if ((value != null))
					{
						value.StoreTransaction = this;
						this._TransactionId = value.TransactionId;
					}
					else
					{
						this._TransactionId = default(decimal);
					}
					this.SendPropertyChanged("GeneralTransaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TagName;
		
		private decimal _Usage;
		
		private EntitySet<TaggedTransaction> _TaggedTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnUsageChanging(decimal value);
    partial void OnUsageChanged();
    #endregion
		
		public Tag()
		{
			this._TaggedTransactions = new EntitySet<TaggedTransaction>(new Action<TaggedTransaction>(this.attach_TaggedTransactions), new Action<TaggedTransaction>(this.detach_TaggedTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usage", DbType="Decimal(16,0) NOT NULL")]
		public decimal Usage
		{
			get
			{
				return this._Usage;
			}
			set
			{
				if ((this._Usage != value))
				{
					this.OnUsageChanging(value);
					this.SendPropertyChanging();
					this._Usage = value;
					this.SendPropertyChanged("Usage");
					this.OnUsageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TaggedTransaction", Storage="_TaggedTransactions", ThisKey="TagName", OtherKey="TagName")]
		public EntitySet<TaggedTransaction> TaggedTransactions
		{
			get
			{
				return this._TaggedTransactions;
			}
			set
			{
				this._TaggedTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaggedTransactions(TaggedTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_TaggedTransactions(TaggedTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaggedTransaction")]
	public partial class TaggedTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TagName;
		
		private decimal _TransactionId;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<GeneralTransaction> _GeneralTransaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnTransactionIdChanging(decimal value);
    partial void OnTransactionIdChanged();
    #endregion
		
		public TaggedTransaction()
		{
			this._Tag = default(EntityRef<Tag>);
			this._GeneralTransaction = default(EntityRef<GeneralTransaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", DbType="Decimal(16,0) NOT NULL", IsPrimaryKey=true)]
		public decimal TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					if (this._GeneralTransaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TaggedTransaction", Storage="_Tag", ThisKey="TagName", OtherKey="TagName", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.TaggedTransactions.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.TaggedTransactions.Add(this);
						this._TagName = value.TagName;
					}
					else
					{
						this._TagName = default(string);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralTransaction_TaggedTransaction", Storage="_GeneralTransaction", ThisKey="TransactionId", OtherKey="TransactionId", IsForeignKey=true)]
		public GeneralTransaction GeneralTransaction
		{
			get
			{
				return this._GeneralTransaction.Entity;
			}
			set
			{
				GeneralTransaction previousValue = this._GeneralTransaction.Entity;
				if (((previousValue != value) 
							|| (this._GeneralTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralTransaction.Entity = null;
						previousValue.TaggedTransactions.Remove(this);
					}
					this._GeneralTransaction.Entity = value;
					if ((value != null))
					{
						value.TaggedTransactions.Add(this);
						this._TransactionId = value.TransactionId;
					}
					else
					{
						this._TransactionId = default(decimal);
					}
					this.SendPropertyChanged("GeneralTransaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneySplitCompleteUser")]
	public partial class MoneySplitCompleteUser
	{
		
		private decimal _ContextId;
		
		private string _TelegramId;
		
		private string _Name;
		
		public MoneySplitCompleteUser()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextId", DbType="Decimal(9,0) NOT NULL")]
		public decimal ContextId
		{
			get
			{
				return this._ContextId;
			}
			set
			{
				if ((this._ContextId != value))
				{
					this._ContextId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelegramId", DbType="VarChar(16)")]
		public string TelegramId
		{
			get
			{
				return this._TelegramId;
			}
			set
			{
				if ((this._TelegramId != value))
				{
					this._TelegramId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeneralList")]
	public partial class GeneralList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ListId;
		
		private decimal _Vers;
		
		private string _Name;
		
		private decimal _ContextId;
		
		private string _Iban;
		
		private string _CF_owner;
		
		private decimal _ListType;
		
		private decimal _TotalAmount;
		
		private EntitySet<GeneralTransaction> _GeneralTransactions;
		
		private EntityRef<GeneralContext> _GeneralContext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnListIdChanging(decimal value);
    partial void OnListIdChanged();
    partial void OnVersChanging(decimal value);
    partial void OnVersChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContextIdChanging(decimal value);
    partial void OnContextIdChanged();
    partial void OnIbanChanging(string value);
    partial void OnIbanChanged();
    partial void OnCF_ownerChanging(string value);
    partial void OnCF_ownerChanged();
    partial void OnListTypeChanging(decimal value);
    partial void OnListTypeChanged();
    partial void OnTotalAmountChanging(decimal value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public GeneralList()
		{
			this._GeneralTransactions = new EntitySet<GeneralTransaction>(new Action<GeneralTransaction>(this.attach_GeneralTransactions), new Action<GeneralTransaction>(this.detach_GeneralTransactions));
			this._GeneralContext = default(EntityRef<GeneralContext>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListId", AutoSync=AutoSync.OnInsert, DbType="Decimal(16,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal ListId
		{
			get
			{
				return this._ListId;
			}
			set
			{
				if ((this._ListId != value))
				{
					this.OnListIdChanging(value);
					this.SendPropertyChanging();
					this._ListId = value;
					this.SendPropertyChanged("ListId");
					this.OnListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vers", DbType="Decimal(9,0) NOT NULL")]
		public decimal Vers
		{
			get
			{
				return this._Vers;
			}
			set
			{
				if ((this._Vers != value))
				{
					this.OnVersChanging(value);
					this.SendPropertyChanging();
					this._Vers = value;
					this.SendPropertyChanged("Vers");
					this.OnVersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextId", DbType="Decimal(9,0) NOT NULL")]
		public decimal ContextId
		{
			get
			{
				return this._ContextId;
			}
			set
			{
				if ((this._ContextId != value))
				{
					if (this._GeneralContext.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIdChanging(value);
					this.SendPropertyChanging();
					this._ContextId = value;
					this.SendPropertyChanged("ContextId");
					this.OnContextIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Iban", DbType="Char(27)")]
		public string Iban
		{
			get
			{
				return this._Iban;
			}
			set
			{
				if ((this._Iban != value))
				{
					this.OnIbanChanging(value);
					this.SendPropertyChanging();
					this._Iban = value;
					this.SendPropertyChanged("Iban");
					this.OnIbanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CF_owner", DbType="Char(16)")]
		public string CF_owner
		{
			get
			{
				return this._CF_owner;
			}
			set
			{
				if ((this._CF_owner != value))
				{
					this.OnCF_ownerChanging(value);
					this.SendPropertyChanging();
					this._CF_owner = value;
					this.SendPropertyChanged("CF_owner");
					this.OnCF_ownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListType", DbType="Decimal(2,0) NOT NULL")]
		public decimal ListType
		{
			get
			{
				return this._ListType;
			}
			set
			{
				if ((this._ListType != value))
				{
					this.OnListTypeChanging(value);
					this.SendPropertyChanging();
					this._ListType = value;
					this.SendPropertyChanged("ListType");
					this.OnListTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(16,0) NOT NULL")]
		public decimal TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralList_GeneralTransaction", Storage="_GeneralTransactions", ThisKey="ListId", OtherKey="ListId")]
		public EntitySet<GeneralTransaction> GeneralTransactions
		{
			get
			{
				return this._GeneralTransactions;
			}
			set
			{
				this._GeneralTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralContext_GeneralList", Storage="_GeneralContext", ThisKey="ContextId", OtherKey="ContextId", IsForeignKey=true)]
		public GeneralContext GeneralContext
		{
			get
			{
				return this._GeneralContext.Entity;
			}
			set
			{
				GeneralContext previousValue = this._GeneralContext.Entity;
				if (((previousValue != value) 
							|| (this._GeneralContext.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralContext.Entity = null;
						previousValue.GeneralLists.Remove(this);
					}
					this._GeneralContext.Entity = value;
					if ((value != null))
					{
						value.GeneralLists.Add(this);
						this._ContextId = value.ContextId;
					}
					else
					{
						this._ContextId = default(decimal);
					}
					this.SendPropertyChanged("GeneralContext");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneralTransactions(GeneralTransaction entity)
		{
			this.SendPropertyChanging();
			entity.GeneralList = this;
		}
		
		private void detach_GeneralTransactions(GeneralTransaction entity)
		{
			this.SendPropertyChanging();
			entity.GeneralList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeneralTransaction")]
	public partial class GeneralTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _TransactionId;
		
		private decimal _Amount;
		
		private string _Description;
		
		private decimal _TransType;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<decimal> _DayRecurrence;
		
		private System.Nullable<decimal> _MonthRecurrence;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private decimal _ListId;
		
		private System.Nullable<decimal> _UserAuthor;
		
		private EntityRef<StoreTransaction> _StoreTransaction;
		
		private EntitySet<TaggedTransaction> _TaggedTransactions;
		
		private EntityRef<GeneralList> _GeneralList;
		
		private EntityRef<MoneySplitUser> _MoneySplitUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIdChanging(decimal value);
    partial void OnTransactionIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTransTypeChanging(decimal value);
    partial void OnTransTypeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDayRecurrenceChanging(System.Nullable<decimal> value);
    partial void OnDayRecurrenceChanged();
    partial void OnMonthRecurrenceChanging(System.Nullable<decimal> value);
    partial void OnMonthRecurrenceChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnListIdChanging(decimal value);
    partial void OnListIdChanged();
    partial void OnUserAuthorChanging(System.Nullable<decimal> value);
    partial void OnUserAuthorChanged();
    #endregion
		
		public GeneralTransaction()
		{
			this._StoreTransaction = default(EntityRef<StoreTransaction>);
			this._TaggedTransactions = new EntitySet<TaggedTransaction>(new Action<TaggedTransaction>(this.attach_TaggedTransactions), new Action<TaggedTransaction>(this.detach_TaggedTransactions));
			this._GeneralList = default(EntityRef<GeneralList>);
			this._MoneySplitUser = default(EntityRef<MoneySplitUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", AutoSync=AutoSync.OnInsert, DbType="Decimal(16,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(15,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransType", DbType="Decimal(2,0) NOT NULL")]
		public decimal TransType
		{
			get
			{
				return this._TransType;
			}
			set
			{
				if ((this._TransType != value))
				{
					this.OnTransTypeChanging(value);
					this.SendPropertyChanging();
					this._TransType = value;
					this.SendPropertyChanged("TransType");
					this.OnTransTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayRecurrence", DbType="Decimal(2,0)")]
		public System.Nullable<decimal> DayRecurrence
		{
			get
			{
				return this._DayRecurrence;
			}
			set
			{
				if ((this._DayRecurrence != value))
				{
					this.OnDayRecurrenceChanging(value);
					this.SendPropertyChanging();
					this._DayRecurrence = value;
					this.SendPropertyChanged("DayRecurrence");
					this.OnDayRecurrenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthRecurrence", DbType="Decimal(2,0)")]
		public System.Nullable<decimal> MonthRecurrence
		{
			get
			{
				return this._MonthRecurrence;
			}
			set
			{
				if ((this._MonthRecurrence != value))
				{
					this.OnMonthRecurrenceChanging(value);
					this.SendPropertyChanging();
					this._MonthRecurrence = value;
					this.SendPropertyChanged("MonthRecurrence");
					this.OnMonthRecurrenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Date")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListId", DbType="Decimal(16,0) NOT NULL")]
		public decimal ListId
		{
			get
			{
				return this._ListId;
			}
			set
			{
				if ((this._ListId != value))
				{
					if (this._GeneralList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnListIdChanging(value);
					this.SendPropertyChanging();
					this._ListId = value;
					this.SendPropertyChanged("ListId");
					this.OnListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAuthor", DbType="Decimal(9,0)")]
		public System.Nullable<decimal> UserAuthor
		{
			get
			{
				return this._UserAuthor;
			}
			set
			{
				if ((this._UserAuthor != value))
				{
					if (this._MoneySplitUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAuthorChanging(value);
					this.SendPropertyChanging();
					this._UserAuthor = value;
					this.SendPropertyChanged("UserAuthor");
					this.OnUserAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralTransaction_StoreTransaction", Storage="_StoreTransaction", ThisKey="TransactionId", OtherKey="TransactionId", IsUnique=true, IsForeignKey=false)]
		public StoreTransaction StoreTransaction
		{
			get
			{
				return this._StoreTransaction.Entity;
			}
			set
			{
				StoreTransaction previousValue = this._StoreTransaction.Entity;
				if (((previousValue != value) 
							|| (this._StoreTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreTransaction.Entity = null;
						previousValue.GeneralTransaction = null;
					}
					this._StoreTransaction.Entity = value;
					if ((value != null))
					{
						value.GeneralTransaction = this;
					}
					this.SendPropertyChanged("StoreTransaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralTransaction_TaggedTransaction", Storage="_TaggedTransactions", ThisKey="TransactionId", OtherKey="TransactionId")]
		public EntitySet<TaggedTransaction> TaggedTransactions
		{
			get
			{
				return this._TaggedTransactions;
			}
			set
			{
				this._TaggedTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralList_GeneralTransaction", Storage="_GeneralList", ThisKey="ListId", OtherKey="ListId", IsForeignKey=true)]
		public GeneralList GeneralList
		{
			get
			{
				return this._GeneralList.Entity;
			}
			set
			{
				GeneralList previousValue = this._GeneralList.Entity;
				if (((previousValue != value) 
							|| (this._GeneralList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralList.Entity = null;
						previousValue.GeneralTransactions.Remove(this);
					}
					this._GeneralList.Entity = value;
					if ((value != null))
					{
						value.GeneralTransactions.Add(this);
						this._ListId = value.ListId;
					}
					else
					{
						this._ListId = default(decimal);
					}
					this.SendPropertyChanged("GeneralList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MoneySplitUser_GeneralTransaction", Storage="_MoneySplitUser", ThisKey="UserAuthor", OtherKey="ContextId", IsForeignKey=true)]
		public MoneySplitUser MoneySplitUser
		{
			get
			{
				return this._MoneySplitUser.Entity;
			}
			set
			{
				MoneySplitUser previousValue = this._MoneySplitUser.Entity;
				if (((previousValue != value) 
							|| (this._MoneySplitUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoneySplitUser.Entity = null;
						previousValue.GeneralTransactions.Remove(this);
					}
					this._MoneySplitUser.Entity = value;
					if ((value != null))
					{
						value.GeneralTransactions.Add(this);
						this._UserAuthor = value.ContextId;
					}
					else
					{
						this._UserAuthor = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("MoneySplitUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaggedTransactions(TaggedTransaction entity)
		{
			this.SendPropertyChanging();
			entity.GeneralTransaction = this;
		}
		
		private void detach_TaggedTransactions(TaggedTransaction entity)
		{
			this.SendPropertyChanging();
			entity.GeneralTransaction = null;
		}
	}
	
	public partial class GetNextAvailableIDValueResult
	{
		
		private int _Column1;
		
		public GetNextAvailableIDValueResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="Int NOT NULL")]
		public int Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
